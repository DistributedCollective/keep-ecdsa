{
  "contractName": "IRandomBeaconConsumer",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "relayEntry",
          "type": "uint256"
        }
      ],
      "name": "__beaconCallback",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"relayEntry\",\"type\":\"uint256\"}],\"name\":\"__beaconCallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Use this interface to indicate the contract receives relay entries from the beacon and to ensure the correctness of callback function signature.\",\"methods\":{\"__beaconCallback(uint256)\":{\"params\":{\"relayEntry\":\"Relay entry (random number) produced by Keep Random Beacon.\"}}},\"title\":\"Keep Random Beacon Consumer \"},\"userdoc\":{\"methods\":{\"__beaconCallback(uint256)\":{\"notice\":\"Receives relay entry produced by Keep Random Beacon. This function should be called only by Keep Random Beacon. \"}},\"notice\":\"Receives Keep Random Beacon relay entries with `__beaconCallback` function. Contract implementing this interface does not have to be the one requesting relay entry but it is the one receiving the requested relay entry once it is produced. \"}},\"settings\":{\"compilationTarget\":{\"@keep-network/keep-core/contracts/IRandomBeacon.sol\":\"IRandomBeaconConsumer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@keep-network/keep-core/contracts/IRandomBeacon.sol\":{\"keccak256\":\"0x9752247361b99149405c88c6a8edb966a4ceb9bca9a9d2b68fc3315f0803e634\",\"urls\":[\"bzz-raw://1fe20d047eeb1699db5ff76e24fd778242af609d3964f7201493bdf4e556505c\",\"dweb:/ipfs/QmecCdZZowe5uWyurJTQGUbc78ZYWpQDwUPdEKSEx8B7dr\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "/**\n▓▓▌ ▓▓ ▐▓▓ ▓▓▓▓▓▓▓▓▓▓▌▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▄\n▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▌▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n  ▓▓▓▓▓▓    ▓▓▓▓▓▓▓▀    ▐▓▓▓▓▓▓    ▐▓▓▓▓▓   ▓▓▓▓▓▓     ▓▓▓▓▓   ▐▓▓▓▓▓▌   ▐▓▓▓▓▓▓\n  ▓▓▓▓▓▓▄▄▓▓▓▓▓▓▓▀      ▐▓▓▓▓▓▓▄▄▄▄         ▓▓▓▓▓▓▄▄▄▄         ▐▓▓▓▓▓▌   ▐▓▓▓▓▓▓\n  ▓▓▓▓▓▓▓▓▓▓▓▓▓▀        ▐▓▓▓▓▓▓▓▓▓▓         ▓▓▓▓▓▓▓▓▓▓▌        ▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n  ▓▓▓▓▓▓▀▀▓▓▓▓▓▓▄       ▐▓▓▓▓▓▓▀▀▀▀         ▓▓▓▓▓▓▀▀▀▀         ▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▀\n  ▓▓▓▓▓▓   ▀▓▓▓▓▓▓▄     ▐▓▓▓▓▓▓     ▓▓▓▓▓   ▓▓▓▓▓▓     ▓▓▓▓▓   ▐▓▓▓▓▓▌\n▓▓▓▓▓▓▓▓▓▓ █▓▓▓▓▓▓▓▓▓ ▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ▓▓▓▓▓▓▓▓▓▓\n▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ▓▓▓▓▓▓▓▓▓▓\n\n                           Trust math, not hardware.\n*/\n\npragma solidity 0.5.17;\n\n/// @title Keep Random Beacon\n///\n/// @notice Keep Random Beacon generates verifiable randomness that is resistant\n/// to bad actors both in the relay network and on the anchoring blockchain.\ninterface IRandomBeacon {\n    /// @notice Event emitted for each new relay entry generated. It contains\n    /// request ID allowing to associate the generated relay entry with relay\n    /// request created previously with `requestRelayEntry` function. Event is\n    /// emitted no matter if callback was executed or not.\n    ///\n    /// @param requestId Relay request ID for which entry was generated.\n    /// @param entry Generated relay entry.\n    event RelayEntryGenerated(uint256 requestId, uint256 entry);\n\n    /// @notice Provides the customer with an estimated entry fee in wei to use\n    /// in the request. The fee estimate is only valid for the transaction it is\n    /// called in, so the customer must make the request immediately after\n    /// obtaining the estimate. Insufficient payment will lead to the request\n    /// being rejected and the transaction reverted.\n    ///\n    /// The customer may decide to provide more ether for an entry fee than\n    /// estimated by this function. This is especially helpful when callback gas\n    /// cost fluctuates. Any surplus between the passed fee and the actual cost\n    /// of producing an entry and executing a callback is returned back to the\n    /// customer.\n    /// @param callbackGas Gas required for the callback.\n    function entryFeeEstimate(uint256 callbackGas)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Submits a request to generate a new relay entry. Executes\n    /// callback on the provided callback contract with the generated entry and\n    /// emits `RelayEntryGenerated(uint256 requestId, uint256 entry)` event.\n    /// Callback contract has to declare public `__beaconCallback(uint256)`\n    /// function that is going to be executed with the result, once ready.\n    /// It is recommended to implement `IRandomBeaconConsumer` interface to\n    /// ensure the correct callback function signature.\n    ///\n    /// @dev Beacon does not support concurrent relay requests. No new requests\n    /// should be made while the beacon is already processing another request.\n    /// Requests made while the beacon is busy will be rejected and the\n    /// transaction reverted.\n    ///\n    /// @param callbackContract Callback contract address. Callback is called\n    /// once a new relay entry has been generated. Must declare public\n    /// `__beaconCallback(uint256)` function. It is recommended to implement\n    /// `IRandomBeaconConsumer` interface to ensure the correct callback function\n    /// signature.\n    /// @param callbackGas Gas required for the callback.\n    /// The customer needs to ensure they provide a sufficient callback gas\n    /// to cover the gas fee of executing the callback. Any surplus is returned\n    /// to the customer. If the callback gas amount turns to be not enough to\n    /// execute the callback, callback execution is skipped.\n    /// @return An uint256 representing uniquely generated relay request ID\n    function requestRelayEntry(address callbackContract, uint256 callbackGas)\n        external\n        payable\n        returns (uint256);\n\n    /// @notice Submits a request to generate a new relay entry. Emits\n    /// `RelayEntryGenerated(uint256 requestId, uint256 entry)` event for the\n    /// generated entry.\n    ///\n    /// @dev Beacon does not support concurrent relay requests. No new requests\n    /// should be made while the beacon is already processing another request.\n    /// Requests made while the beacon is busy will be rejected and the\n    /// transaction reverted.\n    ///\n    /// @return An uint256 representing uniquely generated relay request ID\n    function requestRelayEntry() external payable returns (uint256);\n}\n\n/// @title Keep Random Beacon Consumer\n///\n/// @notice Receives Keep Random Beacon relay entries with `__beaconCallback`\n/// function. Contract implementing this interface does not have to be the one\n/// requesting relay entry but it is the one receiving the requested relay entry\n/// once it is produced.\n///\n/// @dev Use this interface to indicate the contract receives relay entries from\n/// the beacon and to ensure the correctness of callback function signature.\ninterface IRandomBeaconConsumer {\n    /// @notice Receives relay entry produced by Keep Random Beacon. This function\n    /// should be called only by Keep Random Beacon.\n    ///\n    /// @param relayEntry Relay entry (random number) produced by Keep Random\n    /// Beacon.\n    function __beaconCallback(uint256 relayEntry) external;\n}\n",
  "sourcePath": "@keep-network/keep-core/contracts/IRandomBeacon.sol",
  "ast": {
    "absolutePath": "@keep-network/keep-core/contracts/IRandomBeacon.sol",
    "exportedSymbols": {
      "IRandomBeacon": [
        8383
      ],
      "IRandomBeaconConsumer": [
        8389
      ]
    },
    "id": 8390,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 8355,
        "literals": [
          "solidity",
          "0.5",
          ".17"
        ],
        "nodeType": "PragmaDirective",
        "src": "1837:23:50"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": "@title Keep Random Beacon\n\n/// @notice Keep Random Beacon generates verifiable randomness that is resistant\n to bad actors both in the relay network and on the anchoring blockchain.",
        "fullyImplemented": false,
        "id": 8383,
        "linearizedBaseContracts": [
          8383
        ],
        "name": "IRandomBeacon",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": "@notice Event emitted for each new relay entry generated. It contains\n request ID allowing to associate the generated relay entry with relay\n request created previously with `requestRelayEntry` function. Event is\n emitted no matter if callback was executed or not.\n\n    /// @param requestId Relay request ID for which entry was generated.\n @param entry Generated relay entry.",
            "id": 8361,
            "name": "RelayEntryGenerated",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 8360,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8357,
                  "indexed": false,
                  "name": "requestId",
                  "nodeType": "VariableDeclaration",
                  "scope": 8361,
                  "src": "2529:17:50",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 8356,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2529:7:50",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 8359,
                  "indexed": false,
                  "name": "entry",
                  "nodeType": "VariableDeclaration",
                  "scope": 8361,
                  "src": "2548:13:50",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 8358,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2548:7:50",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2528:34:50"
            },
            "src": "2503:60:50"
          },
          {
            "body": null,
            "documentation": "@notice Provides the customer with an estimated entry fee in wei to use\n in the request. The fee estimate is only valid for the transaction it is\n called in, so the customer must make the request immediately after\n obtaining the estimate. Insufficient payment will lead to the request\n being rejected and the transaction reverted.\n\n    /// The customer may decide to provide more ether for an entry fee than\n estimated by this function. This is especially helpful when callback gas\n cost fluctuates. Any surplus between the passed fee and the actual cost\n of producing an entry and executing a callback is returned back to the\n customer.\n @param callbackGas Gas required for the callback.",
            "id": 8368,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "entryFeeEstimate",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8364,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8363,
                  "name": "callbackGas",
                  "nodeType": "VariableDeclaration",
                  "scope": 8368,
                  "src": "3362:19:50",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 8362,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3362:7:50",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3361:21:50"
            },
            "returnParameters": {
              "id": 8367,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8366,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 8368,
                  "src": "3430:7:50",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 8365,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3430:7:50",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3429:9:50"
            },
            "scope": 8383,
            "src": "3336:103:50",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": "@notice Submits a request to generate a new relay entry. Executes\n callback on the provided callback contract with the generated entry and\n emits `RelayEntryGenerated(uint256 requestId, uint256 entry)` event.\n Callback contract has to declare public `__beaconCallback(uint256)`\n function that is going to be executed with the result, once ready.\n It is recommended to implement `IRandomBeaconConsumer` interface to\n ensure the correct callback function signature.\n\n    /// @dev Beacon does not support concurrent relay requests. No new requests\n should be made while the beacon is already processing another request.\n Requests made while the beacon is busy will be rejected and the\n transaction reverted.\n\n    /// @param callbackContract Callback contract address. Callback is called\n once a new relay entry has been generated. Must declare public\n `__beaconCallback(uint256)` function. It is recommended to implement\n `IRandomBeaconConsumer` interface to ensure the correct callback function\n signature.\n @param callbackGas Gas required for the callback.\n The customer needs to ensure they provide a sufficient callback gas\n to cover the gas fee of executing the callback. Any surplus is returned\n to the customer. If the callback gas amount turns to be not enough to\n execute the callback, callback execution is skipped.\n @return An uint256 representing uniquely generated relay request ID",
            "id": 8377,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "requestRelayEntry",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8373,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8370,
                  "name": "callbackContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 8377,
                  "src": "5019:24:50",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 8369,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5019:7:50",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 8372,
                  "name": "callbackGas",
                  "nodeType": "VariableDeclaration",
                  "scope": 8377,
                  "src": "5045:19:50",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 8371,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5045:7:50",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5018:47:50"
            },
            "returnParameters": {
              "id": 8376,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8375,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 8377,
                  "src": "5116:7:50",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 8374,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5116:7:50",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5115:9:50"
            },
            "scope": 8383,
            "src": "4992:133:50",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": "@notice Submits a request to generate a new relay entry. Emits\n `RelayEntryGenerated(uint256 requestId, uint256 entry)` event for the\n generated entry.\n\n    /// @dev Beacon does not support concurrent relay requests. No new requests\n should be made while the beacon is already processing another request.\n Requests made while the beacon is busy will be rejected and the\n transaction reverted.\n\n    /// @return An uint256 representing uniquely generated relay request ID",
            "id": 8382,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "requestRelayEntry",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8378,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5684:2:50"
            },
            "returnParameters": {
              "id": 8381,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8380,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 8382,
                  "src": "5713:7:50",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 8379,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5713:7:50",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5712:9:50"
            },
            "scope": 8383,
            "src": "5658:64:50",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 8390,
        "src": "2054:3670:50"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": "@title Keep Random Beacon Consumer\n\n/// @notice Receives Keep Random Beacon relay entries with `__beaconCallback`\n function. Contract implementing this interface does not have to be the one\n requesting relay entry but it is the one receiving the requested relay entry\n once it is produced.\n\n/// @dev Use this interface to indicate the contract receives relay entries from\n the beacon and to ensure the correctness of callback function signature.",
        "fullyImplemented": false,
        "id": 8389,
        "linearizedBaseContracts": [
          8389
        ],
        "name": "IRandomBeaconConsumer",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": "@notice Receives relay entry produced by Keep Random Beacon. This function\n should be called only by Keep Random Beacon.\n\n    /// @param relayEntry Relay entry (random number) produced by Keep Random\n Beacon.",
            "id": 8388,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "__beaconCallback",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 8386,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8385,
                  "name": "relayEntry",
                  "nodeType": "VariableDeclaration",
                  "scope": 8388,
                  "src": "6496:18:50",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 8384,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6496:7:50",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "6495:20:50"
            },
            "returnParameters": {
              "id": 8387,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6524:0:50"
            },
            "scope": 8389,
            "src": "6470:55:50",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 8390,
        "src": "6194:333:50"
      }
    ],
    "src": "1837:4691:50"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "@keep-network/keep-core/contracts/IRandomBeacon.sol",
      "exportedSymbols": {
        "IRandomBeacon": [
          8383
        ],
        "IRandomBeaconConsumer": [
          8389
        ]
      }
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            "0.5",
            ".17"
          ]
        },
        "id": 8355,
        "name": "PragmaDirective",
        "src": "1837:23:50"
      },
      {
        "attributes": {
          "baseContracts": [
            null
          ],
          "contractDependencies": [
            null
          ],
          "contractKind": "interface",
          "documentation": "@title Keep Random Beacon\n\n/// @notice Keep Random Beacon generates verifiable randomness that is resistant\n to bad actors both in the relay network and on the anchoring blockchain.",
          "fullyImplemented": false,
          "linearizedBaseContracts": [
            8383
          ],
          "name": "IRandomBeacon",
          "scope": 8390
        },
        "children": [
          {
            "attributes": {
              "anonymous": false,
              "documentation": "@notice Event emitted for each new relay entry generated. It contains\n request ID allowing to associate the generated relay entry with relay\n request created previously with `requestRelayEntry` function. Event is\n emitted no matter if callback was executed or not.\n\n    /// @param requestId Relay request ID for which entry was generated.\n @param entry Generated relay entry.",
              "name": "RelayEntryGenerated"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "indexed": false,
                      "name": "requestId",
                      "scope": 8361,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 8356,
                        "name": "ElementaryTypeName",
                        "src": "2529:7:50"
                      }
                    ],
                    "id": 8357,
                    "name": "VariableDeclaration",
                    "src": "2529:17:50"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "indexed": false,
                      "name": "entry",
                      "scope": 8361,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 8358,
                        "name": "ElementaryTypeName",
                        "src": "2548:7:50"
                      }
                    ],
                    "id": 8359,
                    "name": "VariableDeclaration",
                    "src": "2548:13:50"
                  }
                ],
                "id": 8360,
                "name": "ParameterList",
                "src": "2528:34:50"
              }
            ],
            "id": 8361,
            "name": "EventDefinition",
            "src": "2503:60:50"
          },
          {
            "attributes": {
              "body": null,
              "documentation": "@notice Provides the customer with an estimated entry fee in wei to use\n in the request. The fee estimate is only valid for the transaction it is\n called in, so the customer must make the request immediately after\n obtaining the estimate. Insufficient payment will lead to the request\n being rejected and the transaction reverted.\n\n    /// The customer may decide to provide more ether for an entry fee than\n estimated by this function. This is especially helpful when callback gas\n cost fluctuates. Any surplus between the passed fee and the actual cost\n of producing an entry and executing a callback is returned back to the\n customer.\n @param callbackGas Gas required for the callback.",
              "implemented": false,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "entryFeeEstimate",
              "scope": 8383,
              "stateMutability": "view",
              "superFunction": null,
              "visibility": "external"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "callbackGas",
                      "scope": 8368,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 8362,
                        "name": "ElementaryTypeName",
                        "src": "3362:7:50"
                      }
                    ],
                    "id": 8363,
                    "name": "VariableDeclaration",
                    "src": "3362:19:50"
                  }
                ],
                "id": 8364,
                "name": "ParameterList",
                "src": "3361:21:50"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "",
                      "scope": 8368,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 8365,
                        "name": "ElementaryTypeName",
                        "src": "3430:7:50"
                      }
                    ],
                    "id": 8366,
                    "name": "VariableDeclaration",
                    "src": "3430:7:50"
                  }
                ],
                "id": 8367,
                "name": "ParameterList",
                "src": "3429:9:50"
              }
            ],
            "id": 8368,
            "name": "FunctionDefinition",
            "src": "3336:103:50"
          },
          {
            "attributes": {
              "body": null,
              "documentation": "@notice Submits a request to generate a new relay entry. Executes\n callback on the provided callback contract with the generated entry and\n emits `RelayEntryGenerated(uint256 requestId, uint256 entry)` event.\n Callback contract has to declare public `__beaconCallback(uint256)`\n function that is going to be executed with the result, once ready.\n It is recommended to implement `IRandomBeaconConsumer` interface to\n ensure the correct callback function signature.\n\n    /// @dev Beacon does not support concurrent relay requests. No new requests\n should be made while the beacon is already processing another request.\n Requests made while the beacon is busy will be rejected and the\n transaction reverted.\n\n    /// @param callbackContract Callback contract address. Callback is called\n once a new relay entry has been generated. Must declare public\n `__beaconCallback(uint256)` function. It is recommended to implement\n `IRandomBeaconConsumer` interface to ensure the correct callback function\n signature.\n @param callbackGas Gas required for the callback.\n The customer needs to ensure they provide a sufficient callback gas\n to cover the gas fee of executing the callback. Any surplus is returned\n to the customer. If the callback gas amount turns to be not enough to\n execute the callback, callback execution is skipped.\n @return An uint256 representing uniquely generated relay request ID",
              "implemented": false,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "requestRelayEntry",
              "scope": 8383,
              "stateMutability": "payable",
              "superFunction": null,
              "visibility": "external"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "callbackContract",
                      "scope": 8377,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "address",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "address",
                          "stateMutability": "nonpayable",
                          "type": "address"
                        },
                        "id": 8369,
                        "name": "ElementaryTypeName",
                        "src": "5019:7:50"
                      }
                    ],
                    "id": 8370,
                    "name": "VariableDeclaration",
                    "src": "5019:24:50"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "name": "callbackGas",
                      "scope": 8377,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 8371,
                        "name": "ElementaryTypeName",
                        "src": "5045:7:50"
                      }
                    ],
                    "id": 8372,
                    "name": "VariableDeclaration",
                    "src": "5045:19:50"
                  }
                ],
                "id": 8373,
                "name": "ParameterList",
                "src": "5018:47:50"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "",
                      "scope": 8377,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 8374,
                        "name": "ElementaryTypeName",
                        "src": "5116:7:50"
                      }
                    ],
                    "id": 8375,
                    "name": "VariableDeclaration",
                    "src": "5116:7:50"
                  }
                ],
                "id": 8376,
                "name": "ParameterList",
                "src": "5115:9:50"
              }
            ],
            "id": 8377,
            "name": "FunctionDefinition",
            "src": "4992:133:50"
          },
          {
            "attributes": {
              "body": null,
              "documentation": "@notice Submits a request to generate a new relay entry. Emits\n `RelayEntryGenerated(uint256 requestId, uint256 entry)` event for the\n generated entry.\n\n    /// @dev Beacon does not support concurrent relay requests. No new requests\n should be made while the beacon is already processing another request.\n Requests made while the beacon is busy will be rejected and the\n transaction reverted.\n\n    /// @return An uint256 representing uniquely generated relay request ID",
              "implemented": false,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "requestRelayEntry",
              "scope": 8383,
              "stateMutability": "payable",
              "superFunction": null,
              "visibility": "external"
            },
            "children": [
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 8378,
                "name": "ParameterList",
                "src": "5684:2:50"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "",
                      "scope": 8382,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 8379,
                        "name": "ElementaryTypeName",
                        "src": "5713:7:50"
                      }
                    ],
                    "id": 8380,
                    "name": "VariableDeclaration",
                    "src": "5713:7:50"
                  }
                ],
                "id": 8381,
                "name": "ParameterList",
                "src": "5712:9:50"
              }
            ],
            "id": 8382,
            "name": "FunctionDefinition",
            "src": "5658:64:50"
          }
        ],
        "id": 8383,
        "name": "ContractDefinition",
        "src": "2054:3670:50"
      },
      {
        "attributes": {
          "baseContracts": [
            null
          ],
          "contractDependencies": [
            null
          ],
          "contractKind": "interface",
          "documentation": "@title Keep Random Beacon Consumer\n\n/// @notice Receives Keep Random Beacon relay entries with `__beaconCallback`\n function. Contract implementing this interface does not have to be the one\n requesting relay entry but it is the one receiving the requested relay entry\n once it is produced.\n\n/// @dev Use this interface to indicate the contract receives relay entries from\n the beacon and to ensure the correctness of callback function signature.",
          "fullyImplemented": false,
          "linearizedBaseContracts": [
            8389
          ],
          "name": "IRandomBeaconConsumer",
          "scope": 8390
        },
        "children": [
          {
            "attributes": {
              "body": null,
              "documentation": "@notice Receives relay entry produced by Keep Random Beacon. This function\n should be called only by Keep Random Beacon.\n\n    /// @param relayEntry Relay entry (random number) produced by Keep Random\n Beacon.",
              "implemented": false,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "__beaconCallback",
              "scope": 8389,
              "stateMutability": "nonpayable",
              "superFunction": null,
              "visibility": "external"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "relayEntry",
                      "scope": 8388,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 8384,
                        "name": "ElementaryTypeName",
                        "src": "6496:7:50"
                      }
                    ],
                    "id": 8385,
                    "name": "VariableDeclaration",
                    "src": "6496:18:50"
                  }
                ],
                "id": 8386,
                "name": "ParameterList",
                "src": "6495:20:50"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 8387,
                "name": "ParameterList",
                "src": "6524:0:50"
              }
            ],
            "id": 8388,
            "name": "FunctionDefinition",
            "src": "6470:55:50"
          }
        ],
        "id": 8389,
        "name": "ContractDefinition",
        "src": "6194:333:50"
      }
    ],
    "id": 8390,
    "name": "SourceUnit",
    "src": "1837:4691:50"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.17+commit.d19bba13.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.3.4",
  "updatedAt": "2021-04-30T08:59:51.189Z",
  "devdoc": {
    "details": "Use this interface to indicate the contract receives relay entries from the beacon and to ensure the correctness of callback function signature.",
    "methods": {
      "__beaconCallback(uint256)": {
        "params": {
          "relayEntry": "Relay entry (random number) produced by Keep Random Beacon."
        }
      }
    },
    "title": "Keep Random Beacon Consumer "
  },
  "userdoc": {
    "methods": {
      "__beaconCallback(uint256)": {
        "notice": "Receives relay entry produced by Keep Random Beacon. This function should be called only by Keep Random Beacon. "
      }
    },
    "notice": "Receives Keep Random Beacon relay entries with `__beaconCallback` function. Contract implementing this interface does not have to be the one requesting relay entry but it is the one receiving the requested relay entry once it is produced. "
  }
}