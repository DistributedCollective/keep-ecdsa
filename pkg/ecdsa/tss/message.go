package tss

import (
	"encoding/json"
	"fmt"
)

// TSSProtocolMessage is a network message used to transport messages generated in
// TSS protocol execution. It is a wrapper over a message generated by underlying
// implementation of the protocol.
type TSSProtocolMessage struct {
	SenderID    MemberID
	Payload     []byte
	IsBroadcast bool
}

// Type returns a string type of the `TSSMessage` so that it conforms to
// `net.Message` interface.
func (m *TSSProtocolMessage) Type() string {
	return "ecdsa/tss_message"
}

// Marshal converts this message to a byte array suitable for network communication.
func (m *TSSProtocolMessage) Marshal() ([]byte, error) {
	return json.Marshal(m)
}

// Unmarshal converts a byte array produced by Marshal to a message.
func (m *TSSProtocolMessage) Unmarshal(bytes []byte) error {
	var message TSSProtocolMessage
	if err := json.Unmarshal(bytes, &message); err != nil {
		return err
	}

	m.SenderID = message.SenderID
	m.Payload = message.Payload
	m.IsBroadcast = message.IsBroadcast

	return nil
}

// JoinMessage is a network message used to notify peer members about readiness
// to start protool execution.
type JoinMessage struct {
	SenderID MemberID
}

// Type returns a string type of the `JoinMessage`.
func (m *JoinMessage) Type() string {
	return fmt.Sprintf("%T", m)
}

// Marshal converts this message to a byte array suitable for network communication.
func (m *JoinMessage) Marshal() ([]byte, error) {
	return json.Marshal(m)
}

// Unmarshal converts a byte array produced by Marshal to a message.
func (m *JoinMessage) Unmarshal(bytes []byte) error {
	var message JoinMessage
	if err := json.Unmarshal(bytes, &message); err != nil {
		return err
	}

	m.SenderID = message.SenderID

	return nil
}
